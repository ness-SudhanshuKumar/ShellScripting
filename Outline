
This project will allow you to demonstrate the use of shell scripting for automating tasks, managing log files, handling errors, and more. The idea is to create a script or set of scripts that manage and monitor log files, rotate them, and send alerts when certain thresholds are met.

Project Overview:
The project will involve creating a set of shell scripts that do the following:

Monitor Log Files: Monitor log files for specific patterns or errors.
Log Rotation: Implement a log rotation system to archive or delete old log files.
Alerting System: Send email or Slack notifications when specific patterns are detected or when log files grow beyond a certain size.
Backup Log Files: Automatically back up log files before rotating them to ensure data is not lost.
Scheduling Tasks: Use cron to schedule the log management tasks to run periodically.
Requirements:
Basic Shell Commands: Use basic shell commands like cat, grep, awk, sed, find, tail, etc.
Shell Functions: Create reusable shell functions for each task (e.g., rotate logs, check log size, etc.).
Conditionals and Loops: Use if-else conditions and loops (for or while) to process files.
Error Handling: Handle errors such as missing files, failed operations, or disk space issues.
Log Monitoring: Monitor log files for error patterns (e.g., "ERROR", "CRITICAL").
Notifications: Integrate with mail or a service like Slack for sending notifications.
Log Rotation: Implement a way to compress and archive older logs (e.g., .tar.gz).
Scheduling: Use cron jobs to automate periodic tasks.
Steps to Build the Project:
Create Log Rotation Script (log_rotate.sh)

Rotate logs when they reach a certain size (e.g., 10MB).
Compress the rotated logs and store them in a backup directory.
Delete logs older than 30 days.
Example Code:


#!/bin/sh

LOG_DIR="/var/log/myapp"
BACKUP_DIR="/var/log/myapp/backup"
MAX_SIZE=10485760  # 10MB
RETENTION_DAYS=30

# Function to rotate log files
rotate_log() {
    log_file="$1"
    current_date=$(date +"%Y%m%d%H%M")
    if [ -f "$log_file" ]; then
        mv "$log_file" "$BACKUP_DIR/$(basename "$log_file")_$current_date.log"
        gzip "$BACKUP_DIR/$(basename "$log_file")_$current_date.log"
        echo "Log file rotated: $log_file"
    else
        echo "Log file $log_file does not exist."
    fi
}

# Function to clean old logs
clean_old_logs() {
    find "$BACKUP_DIR" -type f -name "*.gz" -mtime +$RETENTION_DAYS -exec rm -f {} \;
    echo "Cleaned logs older than $RETENTION_DAYS days."
}

# Function to check if log file exceeds max size
check_log_size() {
    log_file="$1"
    file_size=$(stat --format=%s "$log_file")
    if [ "$file_size" -gt "$MAX_SIZE" ]; then
        rotate_log "$log_file"
    fi
}

# Main execution
check_log_size "$LOG_DIR/myapp.log"
clean_old_logs
Create Log Monitoring and Alert Script (log_monitor.sh)

Monitor logs for specific keywords like "ERROR," "CRITICAL," or custom application errors.
Send alerts via email or Slack when those keywords are found.
Example Code:


#!/bin/sh

LOG_FILE="/var/log/myapp/myapp.log"
ERROR_KEYWORDS="ERROR|CRITICAL|FAILURE"
ALERT_EMAIL="admin@example.com"

# Function to check for error patterns in log file
check_for_errors() {
    grep -E "$ERROR_KEYWORDS" "$LOG_FILE" | while read -r line; do
        echo "ALERT: $line" | mail -s "Error detected in log" "$ALERT_EMAIL"
        echo "Error found: $line"
    done
}

# Main execution
check_for_errors
Set Up Cron Jobs for Automation

Automate the execution of the scripts at regular intervals using cron.
Example crontab entries:
Rotate logs every day at midnight:

0 0 * * * /path/to/log_rotate.sh
Monitor logs every hour:

0 * * * * /path/to/log_monitor.sh
Backup and Clean Old Logs (log_backup.sh)

Create a backup of log files and archive old logs that are no longer needed.
Example Code:

#!/bin/sh

LOG_DIR="/var/log/myapp"
BACKUP_DIR="/var/log/myapp/backup"
BACKUP_RETENTION_DAYS=7

# Create backup directory if not exists
mkdir -p "$BACKUP_DIR"

# Backup log files
cp "$LOG_DIR/myapp.log" "$BACKUP_DIR/myapp.log.$(date +"%Y%m%d%H%M")"

# Clean backups older than 7 days
find "$BACKUP_DIR" -type f -mtime +$BACKUP_RETENTION_DAYS -exec rm -f {} \;
Test Your Scripts

Run the scripts manually to ensure they are working as expected.
Check if logs are being rotated and archived.
Test that alerts are being sent correctly when an error pattern is detected in the logs.
Document the Project

Create a README file detailing the purpose of the project, how to run the scripts, and any configuration needed.
Include examples of cron job setup and how to extend the script (e.g., for different log files or notification methods).
Additional Enhancements:
Configuration File: Store configurations like log file paths, email addresses, and retention periods in a separate configuration file.
Slack Integration: Instead of email alerts, you could integrate the script with Slack using Slack's Web API to send messages to a Slack channel.
Advanced Log Parsing: You could use awk or sed to perform more complex parsing of log entries (e.g., extracting specific data or metrics).
Log File Integrity Check: Add functionality to check for corrupt or missing logs.
Skills Demonstrated:
File handling (mv, cp, gzip, find)
Process automation with cron
Log file rotation and management
Error detection and alerting
Handling large log files efficiently
Writing production-grade shell scripts that can be used in real-world systems
This project would be a comprehensive example that can be extended and adapted to any production environment with logs to manage, making it a great showcase for your skills with shell scripting.
